require "rails_helper"

RSpec.describe MalwareScanner do
  subject(:service) do
    described_class.call(
      file_path:,
    #   uploader: provider,
      file_details:,
    )
  end

#   let(:provider) { create(:provider) }
  let(:file_path) { Rails.root.join("spec/fixtures/files/basic_bulk_submission.csv") }
  let(:file_details) do
    {
      name: "basic_bulk_submission.csv",
      size: 10,
      content_type: "text/csv",
      foo: "bar",
    }.stringify_keys
  end
  let(:malware_scan_result) { MalwareScanResult.last }

  describe "#call" do
    it "creates a MalwareScanResult record" do
      expect { service }.to change(MalwareScanResult, :count).by(1)
    end

    it "records uploader and details of file" do
      service
    #   expect(malware_scan_result.uploader).to eq(provider)
      expect(malware_scan_result.file_details).to eq(file_details)
    end

    it "returns created MalwareScanResult record" do
      expect(service).to be_a(MalwareScanResult)
      expect(service.id).to eq(malware_scan_result.id)
    end

    context "when file is safe" do
      it "sets virus_found to false" do
        expect(service.virus_found?).to be(false)
      end
    end

    context "when virus is found", stub_clamav_failure: true do
      let(:file_path) { Rails.root.join("spec/fixtures/files/malware.doc") }

      it "sets virus_found to true" do
        expect(service.virus_found?).to be(true)
      end
    end

    context "when scanner down" do
      let(:scan_result) do
 ["failed: No such file or directory. ERROR\n", "", 
instance_double("process_status", exitstatus: 2, success?: false)] end

      before { allow(Open3).to receive(:capture3).and_return(scan_result) }

      it "returns false" do
        expect(service.scanner_working).to be false
      end

      it "notifies sentry" do
        expect(Sentry).to receive(:capture_message).with(/ClamdscanError, failed: No such file or directory. ERROR/)
        service
      end
    end

    context "with scan_result" do
      let(:stub_stdout) { "scan result" }
      let(:scan_result) { [stub_stdout, "", instance_double("process_status", success?: true, exitstatus: 0)] }

      before { allow(Open3).to receive(:capture3).and_return(scan_result) }

      it "returns and records the result of the scan" do
        expect(service.scan_result).to eq(stub_stdout.strip)
        expect(malware_scan_result.scan_result).to eq(stub_stdout.strip)
      end
    end

    context "when not saving result" do
        subject(:service) do 
          described_class.call(file_path:, save_result: false) 
        end

      it "does not create a MalwareScanResult record" do
        expect { service }.not_to change(MalwareScanResult, :count)
      end

      it "returns a MalwareScanResult object" do
        expect(service).to be_a(MalwareScanResult)
      end
    end
  end
end