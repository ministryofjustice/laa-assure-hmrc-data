require "rails_helper"

RSpec.describe MalwareScanner do
  let(:file_path) { Rails.root.join("spec/fixtures/files/basic_bulk_submission.csv") }
  let(:uploader) { create(:user) }

  let(:file_details) do
    {
      name: "basic_bulk_submission.csv",
      size: 10,
      content_type: "text/csv",
      foo: "bar",
    }.stringify_keys
  end

  let(:malware_scan_result) { MalwareScanResult.last }

  describe "#call" do
    subject(:call) { described_class.call(file_path:, uploader:, file_details:) }

    let(:file_path) { file_fixture("/basic_bulk_submission.csv") }

    let(:file_details) do
      {
        name: "basic_bulk_submission.csv",
        size: 10,
        content_type: "text/csv",
        foo: "bar",
      }.stringify_keys
    end

    it "creates a MalwareScanResult record" do
      expect { call }.to change(MalwareScanResult, :count).by(1)
    end

    it "records details of file" do
      call
      expect(malware_scan_result.file_details).to eq(file_details)
    end

    it "returns created MalwareScanResult record" do
      expect(call).to be_a(MalwareScanResult)
      expect(call.id).to eq(malware_scan_result.id)
    end

    it "stores expected results" do
      expect(call).to have_attributes(
                        uploader_type: "User",
                        uploader_id: uploader.id,
                        virus_found: false,
                        scan_result: /.*OK.*/,
                        scanner_working: true
                      )
      end

    context "with file with no virus", scan_with_clamav: true do
      let(:file_path) { file_fixture("/basic_bulk_submission.csv") }

      it "#virus_found? returns true" do
        expect(call.virus_found?).to be(false)
      end

      it "#scan_result is file: OK" do
        expect(call.scan_result).to match(/.*\/basic_bulk_submission.csv: OK/)
      end
    end

    context "with file with a virus", scan_with_clamav: true do
      let(:file_path) { file_fixture("malware.csv") }

      it "MalwareScanResult#virus_found? returns true" do
        expect(call.virus_found?).to be(true)
      end
      
      it "MalwareScanResult#scan_result is file: Trojan FOUND" do
        expect(call.scan_result).to match(/.*\/malware.csv: Win.Test.EICAR_HDB-1 FOUND/)
      end
    end

    context "when scanner down" do
      before { allow(Open3).to receive(:capture3).and_return(scan_result) }

      let(:scan_result) do
        ["failed: No such file or directory. ERROR\n",
         "",
         instance_double("process_status", exitstatus: 2, success?: false)]
      end

      it "MalwareScanResult#scanner_working? returns false" do
        expect(call.scanner_working).to be false
      end

      it "notifies sentry" do
        expect(Sentry).to receive(:capture_message).with(/ClamdscanError, failed: No such file or directory. ERROR/)
        call
      end
    end

    context "with any scan_result" do
      before { allow(Open3).to receive(:capture3).and_return(scan_result) }

      let(:scan_result) do
        ["whatever scan result",
         "",
         instance_double("process_status", success?: true, exitstatus: 0)]
       end

      it "MalwareScanResult#scan_result stores the result from clamav" do
        expect(call.scan_result).to eq("whatever scan result")
        expect(malware_scan_result.scan_result).to eq("whatever scan result")
      end
    end

    context "when not saving result" do
      subject(:call) { described_class.call(file_path:, uploader:, save_result: false) }

      it "does not create a MalwareScanResult record" do
        expect { call }.not_to change(MalwareScanResult, :count)
      end

      it "returns an unpersisted MalwareScanResult ActiveRecord object" do
        ar_object = call
        expect(ar_object).to be_a(MalwareScanResult)
        expect(ar_object).not_to be_persisted
      end
    end
  end
end
