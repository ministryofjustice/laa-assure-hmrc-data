name: CI and CD

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      RACK_ENV: test
      RAILS_ENV: test
      DATABASE_URL: "postgresql://postgres:postgres@127.0.0.1/laa-assure-hmrc-data-test"

    services:
      postgres:
        image: postgres:14.5-alpine
        env:
          POSTGRES_DB: laa-assure-hmrc-data-test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: '3.2.1'

      - name: Find yarn cache location
        id: yarn-cache
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: JS package cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install packages with yarn
        run: yarn install --frozen-lockfile

      - name: Precompile assets
        run: bin/rails assets:precompile

      - name: Setup test database
        run: bin/rails db:prepare

      - name: Run linters
        run: |
          bundle exec rubocop
          bundle exec rake erblint

      - name: Run tests
        run: bundle exec rspec

  build:
    if: github.actor != 'dependabot[bot]'
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build and push
        id: build_and_push
        uses: ./.github/actions/build_and_push
        with:
          ecr-region: ${{ secrets.ECR_AWS_DEFAULT_REGION }}
          ecr-url: ${{ secrets.ECR_TEAM_REPO_URL }}
          ecr-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          ecr-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy
        id: deploy
        uses: ./.github/actions/deploy
        with:
          ecr-url: ${{ secrets.ECR_TEAM_REPO_URL }}
          kube-cert: ${{ secrets.KUBE_STAGING_CERT }}
          kube-token: ${{ secrets.KUBE_STAGING_TOKEN }}
          kube-cluster: ${{ secrets.KUBE_STAGING_CLUSTER }}
          kube-namespace: ${{ secrets.KUBE_STAGING_NAMESPACE }}
          app-environment: staging
